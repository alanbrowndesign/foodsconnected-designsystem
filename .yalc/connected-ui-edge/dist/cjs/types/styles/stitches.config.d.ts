/// <reference types="react" />
export declare const styled: <Type extends import("@stitches/react/types/util").Function | keyof JSX.IntrinsicElements | import("react").ComponentType<any>, Composers extends (string | import("@stitches/react/types/util").Function | import("react").ComponentType<any> | {
    [name: string]: unknown;
})[], CSS_1 = import("@stitches/react/types/css-util").CSS<{
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xs1: string;
    xs2: string;
    xs3: string;
    sm1: string;
    sm2: string;
    sm3: string;
    md1: string;
    md2: string;
    md3: string;
    lg1: string;
    lg2: string;
    lg3: string;
    xl1: string;
    xl2: string;
    xl3: string;
}, {
    fonts: {
        display: string;
        text: string;
    };
    fontWeights: {
        standard: number;
        heavy: number;
    };
    letterSpacings: {
        tightest: string;
        tighter: string;
        tight: string;
        normal: number;
        wide: string;
        wider: string;
        widest: string;
    };
    radii: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
    };
    fontSizes: {
        "-3": string;
        "-2": string;
        "-1": string;
        0: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
    };
    space: {
        "5xs": string;
        "4xs": string;
        "3xs": string;
        "2xs": string;
        xs: string;
        s: string;
        m: string;
        l: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
        "5xs-4xs": string;
        "4xs-3xs": string;
        "3xs-2xs": string;
        "2xs-xs": string;
        "xs-s": string;
        "s-m": string;
        "m-l": string;
        "l-xl": string;
        "xl-2xl": string;
        "2xl-3xl": string;
        "3xl-4xl": string;
        "4xl-5xl": string;
        "5xl-6xl": string;
        "05": string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    sizes: {
        micro: string;
        xsmall: string;
        small: string;
        medium: string;
        large: string;
        xlarge: string;
        max: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    colors: {
        neutral100: string;
        neutral200: string;
        neutral300: string;
        neutral400: string;
        neutral500: string;
        neutral600: string;
        neutral700: string;
        neutral800: string;
        neutral900: string;
        midnight100: string;
        midnight300: string;
        midnight500: string;
        midnight700: string;
        midnight900: string;
        accentOrangeDark: string;
        accentPink: string;
        accentPurple: string;
        accentNavy: string;
        accentRoyal: string;
        accentCyan: string;
        accentLime: string;
        orange1: string;
        orange2: string;
        orange3: string;
        orange4: string;
        orange5: string;
        orange6: string;
        orange7: string;
        orange8: string;
        orange9: string;
        orange10: string;
        orange11: string;
        orange12: string;
        green1: string;
        green2: string;
        green3: string;
        green4: string;
        green5: string;
        green6: string;
        green7: string;
        green8: string;
        green9: string;
        green10: string;
        green11: string;
        green12: string;
        teal1: string;
        teal2: string;
        teal3: string;
        teal4: string;
        teal5: string;
        teal6: string;
        teal7: string;
        teal8: string;
        teal9: string;
        teal10: string;
        teal11: string;
        teal12: string;
        sky1: string;
        sky2: string;
        sky3: string;
        sky4: string;
        sky5: string;
        sky6: string;
        sky7: string;
        sky8: string;
        sky9: string;
        sky10: string;
        sky11: string;
        sky12: string;
        blue1: string;
        blue2: string;
        blue3: string;
        blue4: string;
        blue5: string;
        blue6: string;
        blue7: string;
        blue8: string;
        blue9: string;
        blue10: string;
        blue11: string;
        blue12: string;
        indigo1: string;
        indigo2: string;
        indigo3: string;
        indigo4: string;
        indigo5: string;
        indigo6: string;
        indigo7: string;
        indigo8: string;
        indigo9: string;
        indigo10: string;
        indigo11: string;
        indigo12: string;
        plum1: string;
        plum2: string;
        plum3: string;
        plum4: string;
        plum5: string;
        plum6: string;
        plum7: string;
        plum8: string;
        plum9: string;
        plum10: string;
        plum11: string;
        plum12: string;
        red1: string;
        red2: string;
        red3: string;
        red4: string;
        red5: string;
        red6: string;
        red7: string;
        red8: string;
        red9: string;
        red10: string;
        red11: string;
        red12: string;
        amber1: string;
        amber2: string;
        amber3: string;
        amber4: string;
        amber5: string;
        amber6: string;
        amber7: string;
        amber8: string;
        amber9: string;
        amber10: string;
        amber11: string;
        amber12: string;
        accentAmber: string;
        accentOrange: string;
        accentRed: string;
        accentPlum: string;
        accentBlue: string;
        accentSky: string;
        accentTeal: string;
        accentGreen: string;
        slateA1: string;
        slateA2: string;
        slateA3: string;
        slateA4: string;
        slateA5: string;
        slateA6: string;
        slateA7: string;
        slateA8: string;
        slateA9: string;
        slateA10: string;
        slateA11: string;
        slateA12: string;
        slate1: string;
        slate2: string;
        slate3: string;
        slate4: string;
        slate5: string;
        slate6: string;
        slate7: string;
        slate8: string;
        slate9: string;
        slate10: string;
        slate11: string;
        slate12: string;
        primaryBrand: string;
        primaryMidnight: string;
        white: string;
        black: string;
    };
    lineHeights: {
        tighter: string;
        tight: string;
        normal: string;
        wide: string;
    };
}, {
    width: string;
    height: string;
    spaceX: string;
    spaceY: string;
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {
    mx: (value: string | number) => {
        marginLeft: string | number;
        marginRight: string | number;
    };
    my: (value: string | number) => {
        marginTop: string | number;
        marginBottom: string | number;
    };
    px: (value: string | number) => {
        paddingLeft: string | number;
        paddingRight: string | number;
    };
    py: (value: string | number) => {
        paddingTop: string | number;
        paddingBottom: string | number;
    };
    size: (value: string | number) => {
        width: string | number;
        height: string | number;
    };
    spaceY: (value: string | number) => {
        "& > :not([hidden]) ~ :not([hidden])": {
            marginTop: string | number;
        };
    };
    spaceX: (value: string | number) => {
        "& > :not([hidden]) ~ :not([hidden])": {
            marginLeft: string | number;
        };
    };
    typeStyle: (styleName: "hero" | "headline" | "title1" | "title2" | "title3" | "heading" | "subhead" | "body" | "footnote" | "caption" | "micro") => {
        fontSize: string;
        fontWeight: string;
        fontFamily: string;
        lineHeight: string;
        letterSpacing: string;
    } | {
        fontSize: string;
        fontFamily: string;
        fontWeight: string;
        letterSpacing: string;
        lineHeight?: undefined;
    } | {
        fontSize: string;
        fontFamily: string;
        letterSpacing: string;
        fontWeight?: undefined;
        lineHeight?: undefined;
    } | {
        fontSize: string;
        fontFamily: string;
        fontWeight?: undefined;
        lineHeight?: undefined;
        letterSpacing?: undefined;
    } | {
        fontSize?: undefined;
        fontWeight?: undefined;
        fontFamily?: undefined;
        lineHeight?: undefined;
        letterSpacing?: undefined;
    };
}>>(type: Type, ...composers: { [K in keyof Composers]: Composers[K] extends string | import("@stitches/react/types/util").Function | import("react").ComponentType<any> ? Composers[K] : import("@stitches/react/types/stitches").RemoveIndex<CSS_1> & {
    variants?: {
        [x: string]: {
            [x: string]: CSS_1;
            [x: number]: CSS_1;
        };
    } | undefined;
    compoundVariants?: (("variants" extends keyof Composers[K] ? { [Name in keyof Composers[K][keyof Composers[K] & "variants"]]?: import("@stitches/react/types/util").String | import("@stitches/react/types/util").Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name]> | undefined; } : import("@stitches/react/types/util").WideObject) & {
        css: CSS_1;
    })[] | undefined;
    defaultVariants?: ("variants" extends keyof Composers[K] ? { [Name_1 in keyof Composers[K][keyof Composers[K] & "variants"]]?: import("@stitches/react/types/util").String | import("@stitches/react/types/util").Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name_1]> | undefined; } : import("@stitches/react/types/util").WideObject) | undefined;
} & CSS_1 & { [K2 in keyof Composers[K]]: K2 extends "compoundVariants" | "defaultVariants" | "variants" ? unknown : K2 extends keyof CSS_1 ? CSS_1[K2] : unknown; }; }) => import("@stitches/react/types/styled-component").StyledComponent<Type, import("@stitches/react/types/styled-component").StyledComponentProps<Composers>, {
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xs1: string;
    xs2: string;
    xs3: string;
    sm1: string;
    sm2: string;
    sm3: string;
    md1: string;
    md2: string;
    md3: string;
    lg1: string;
    lg2: string;
    lg3: string;
    xl1: string;
    xl2: string;
    xl3: string;
}, import("@stitches/react/types/css-util").CSS<{
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xs1: string;
    xs2: string;
    xs3: string;
    sm1: string;
    sm2: string;
    sm3: string;
    md1: string;
    md2: string;
    md3: string;
    lg1: string;
    lg2: string;
    lg3: string;
    xl1: string;
    xl2: string;
    xl3: string;
}, {
    fonts: {
        display: string;
        text: string;
    };
    fontWeights: {
        standard: number;
        heavy: number;
    };
    letterSpacings: {
        tightest: string;
        tighter: string;
        tight: string;
        normal: number;
        wide: string;
        wider: string;
        widest: string;
    };
    radii: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
    };
    fontSizes: {
        "-3": string;
        "-2": string;
        "-1": string;
        0: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
    };
    space: {
        "5xs": string;
        "4xs": string;
        "3xs": string;
        "2xs": string;
        xs: string;
        s: string;
        m: string;
        l: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
        "5xs-4xs": string;
        "4xs-3xs": string;
        "3xs-2xs": string;
        "2xs-xs": string;
        "xs-s": string;
        "s-m": string;
        "m-l": string;
        "l-xl": string;
        "xl-2xl": string;
        "2xl-3xl": string;
        "3xl-4xl": string;
        "4xl-5xl": string;
        "5xl-6xl": string;
        "05": string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    sizes: {
        micro: string;
        xsmall: string;
        small: string;
        medium: string;
        large: string;
        xlarge: string;
        max: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    colors: {
        neutral100: string;
        neutral200: string;
        neutral300: string;
        neutral400: string;
        neutral500: string;
        neutral600: string;
        neutral700: string;
        neutral800: string;
        neutral900: string;
        midnight100: string;
        midnight300: string;
        midnight500: string;
        midnight700: string;
        midnight900: string;
        accentOrangeDark: string;
        accentPink: string;
        accentPurple: string;
        accentNavy: string;
        accentRoyal: string;
        accentCyan: string;
        accentLime: string;
        orange1: string;
        orange2: string;
        orange3: string;
        orange4: string;
        orange5: string;
        orange6: string;
        orange7: string;
        orange8: string;
        orange9: string;
        orange10: string;
        orange11: string;
        orange12: string;
        green1: string;
        green2: string;
        green3: string;
        green4: string;
        green5: string;
        green6: string;
        green7: string;
        green8: string;
        green9: string;
        green10: string;
        green11: string;
        green12: string;
        teal1: string;
        teal2: string;
        teal3: string;
        teal4: string;
        teal5: string;
        teal6: string;
        teal7: string;
        teal8: string;
        teal9: string;
        teal10: string;
        teal11: string;
        teal12: string;
        sky1: string;
        sky2: string;
        sky3: string;
        sky4: string;
        sky5: string;
        sky6: string;
        sky7: string;
        sky8: string;
        sky9: string;
        sky10: string;
        sky11: string;
        sky12: string;
        blue1: string;
        blue2: string;
        blue3: string;
        blue4: string;
        blue5: string;
        blue6: string;
        blue7: string;
        blue8: string;
        blue9: string;
        blue10: string;
        blue11: string;
        blue12: string;
        indigo1: string;
        indigo2: string;
        indigo3: string;
        indigo4: string;
        indigo5: string;
        indigo6: string;
        indigo7: string;
        indigo8: string;
        indigo9: string;
        indigo10: string;
        indigo11: string;
        indigo12: string;
        plum1: string;
        plum2: string;
        plum3: string;
        plum4: string;
        plum5: string;
        plum6: string;
        plum7: string;
        plum8: string;
        plum9: string;
        plum10: string;
        plum11: string;
        plum12: string;
        red1: string;
        red2: string;
        red3: string;
        red4: string;
        red5: string;
        red6: string;
        red7: string;
        red8: string;
        red9: string;
        red10: string;
        red11: string;
        red12: string;
        amber1: string;
        amber2: string;
        amber3: string;
        amber4: string;
        amber5: string;
        amber6: string;
        amber7: string;
        amber8: string;
        amber9: string;
        amber10: string;
        amber11: string;
        amber12: string;
        accentAmber: string;
        accentOrange: string;
        accentRed: string;
        accentPlum: string;
        accentBlue: string;
        accentSky: string;
        accentTeal: string;
        accentGreen: string;
        slateA1: string;
        slateA2: string;
        slateA3: string;
        slateA4: string;
        slateA5: string;
        slateA6: string;
        slateA7: string;
        slateA8: string;
        slateA9: string;
        slateA10: string;
        slateA11: string;
        slateA12: string;
        slate1: string;
        slate2: string;
        slate3: string;
        slate4: string;
        slate5: string;
        slate6: string;
        slate7: string;
        slate8: string;
        slate9: string;
        slate10: string;
        slate11: string;
        slate12: string;
        primaryBrand: string;
        primaryMidnight: string;
        white: string;
        black: string;
    };
    lineHeights: {
        tighter: string;
        tight: string;
        normal: string;
        wide: string;
    };
}, {
    width: string;
    height: string;
    spaceX: string;
    spaceY: string;
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {
    mx: (value: string | number) => {
        marginLeft: string | number;
        marginRight: string | number;
    };
    my: (value: string | number) => {
        marginTop: string | number;
        marginBottom: string | number;
    };
    px: (value: string | number) => {
        paddingLeft: string | number;
        paddingRight: string | number;
    };
    py: (value: string | number) => {
        paddingTop: string | number;
        paddingBottom: string | number;
    };
    size: (value: string | number) => {
        width: string | number;
        height: string | number;
    };
    spaceY: (value: string | number) => {
        "& > :not([hidden]) ~ :not([hidden])": {
            marginTop: string | number;
        };
    };
    spaceX: (value: string | number) => {
        "& > :not([hidden]) ~ :not([hidden])": {
            marginLeft: string | number;
        };
    };
    typeStyle: (styleName: "hero" | "headline" | "title1" | "title2" | "title3" | "heading" | "subhead" | "body" | "footnote" | "caption" | "micro") => {
        fontSize: string;
        fontWeight: string;
        fontFamily: string;
        lineHeight: string;
        letterSpacing: string;
    } | {
        fontSize: string;
        fontFamily: string;
        fontWeight: string;
        letterSpacing: string;
        lineHeight?: undefined;
    } | {
        fontSize: string;
        fontFamily: string;
        letterSpacing: string;
        fontWeight?: undefined;
        lineHeight?: undefined;
    } | {
        fontSize: string;
        fontFamily: string;
        fontWeight?: undefined;
        lineHeight?: undefined;
        letterSpacing?: undefined;
    } | {
        fontSize?: undefined;
        fontWeight?: undefined;
        fontFamily?: undefined;
        lineHeight?: undefined;
        letterSpacing?: undefined;
    };
}>>, css: <Composers extends (string | import("@stitches/react/types/util").Function | import("react").JSXElementConstructor<any> | import("react").ExoticComponent<any> | {
    [name: string]: unknown;
})[], CSS_1 = import("@stitches/react/types/css-util").CSS<{
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xs1: string;
    xs2: string;
    xs3: string;
    sm1: string;
    sm2: string;
    sm3: string;
    md1: string;
    md2: string;
    md3: string;
    lg1: string;
    lg2: string;
    lg3: string;
    xl1: string;
    xl2: string;
    xl3: string;
}, {
    fonts: {
        display: string;
        text: string;
    };
    fontWeights: {
        standard: number;
        heavy: number;
    };
    letterSpacings: {
        tightest: string;
        tighter: string;
        tight: string;
        normal: number;
        wide: string;
        wider: string;
        widest: string;
    };
    radii: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
    };
    fontSizes: {
        "-3": string;
        "-2": string;
        "-1": string;
        0: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
    };
    space: {
        "5xs": string;
        "4xs": string;
        "3xs": string;
        "2xs": string;
        xs: string;
        s: string;
        m: string;
        l: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
        "5xs-4xs": string;
        "4xs-3xs": string;
        "3xs-2xs": string;
        "2xs-xs": string;
        "xs-s": string;
        "s-m": string;
        "m-l": string;
        "l-xl": string;
        "xl-2xl": string;
        "2xl-3xl": string;
        "3xl-4xl": string;
        "4xl-5xl": string;
        "5xl-6xl": string;
        "05": string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    sizes: {
        micro: string;
        xsmall: string;
        small: string;
        medium: string;
        large: string;
        xlarge: string;
        max: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    colors: {
        neutral100: string;
        neutral200: string;
        neutral300: string;
        neutral400: string;
        neutral500: string;
        neutral600: string;
        neutral700: string;
        neutral800: string;
        neutral900: string;
        midnight100: string;
        midnight300: string;
        midnight500: string;
        midnight700: string;
        midnight900: string;
        accentOrangeDark: string;
        accentPink: string;
        accentPurple: string;
        accentNavy: string;
        accentRoyal: string;
        accentCyan: string;
        accentLime: string;
        orange1: string;
        orange2: string;
        orange3: string;
        orange4: string;
        orange5: string;
        orange6: string;
        orange7: string;
        orange8: string;
        orange9: string;
        orange10: string;
        orange11: string;
        orange12: string;
        green1: string;
        green2: string;
        green3: string;
        green4: string;
        green5: string;
        green6: string;
        green7: string;
        green8: string;
        green9: string;
        green10: string;
        green11: string;
        green12: string;
        teal1: string;
        teal2: string;
        teal3: string;
        teal4: string;
        teal5: string;
        teal6: string;
        teal7: string;
        teal8: string;
        teal9: string;
        teal10: string;
        teal11: string;
        teal12: string;
        sky1: string;
        sky2: string;
        sky3: string;
        sky4: string;
        sky5: string;
        sky6: string;
        sky7: string;
        sky8: string;
        sky9: string;
        sky10: string;
        sky11: string;
        sky12: string;
        blue1: string;
        blue2: string;
        blue3: string;
        blue4: string;
        blue5: string;
        blue6: string;
        blue7: string;
        blue8: string;
        blue9: string;
        blue10: string;
        blue11: string;
        blue12: string;
        indigo1: string;
        indigo2: string;
        indigo3: string;
        indigo4: string;
        indigo5: string;
        indigo6: string;
        indigo7: string;
        indigo8: string;
        indigo9: string;
        indigo10: string;
        indigo11: string;
        indigo12: string;
        plum1: string;
        plum2: string;
        plum3: string;
        plum4: string;
        plum5: string;
        plum6: string;
        plum7: string;
        plum8: string;
        plum9: string;
        plum10: string;
        plum11: string;
        plum12: string;
        red1: string;
        red2: string;
        red3: string;
        red4: string;
        red5: string;
        red6: string;
        red7: string;
        red8: string;
        red9: string;
        red10: string;
        red11: string;
        red12: string;
        amber1: string;
        amber2: string;
        amber3: string;
        amber4: string;
        amber5: string;
        amber6: string;
        amber7: string;
        amber8: string;
        amber9: string;
        amber10: string;
        amber11: string;
        amber12: string;
        accentAmber: string;
        accentOrange: string;
        accentRed: string;
        accentPlum: string;
        accentBlue: string;
        accentSky: string;
        accentTeal: string;
        accentGreen: string;
        slateA1: string;
        slateA2: string;
        slateA3: string;
        slateA4: string;
        slateA5: string;
        slateA6: string;
        slateA7: string;
        slateA8: string;
        slateA9: string;
        slateA10: string;
        slateA11: string;
        slateA12: string;
        slate1: string;
        slate2: string;
        slate3: string;
        slate4: string;
        slate5: string;
        slate6: string;
        slate7: string;
        slate8: string;
        slate9: string;
        slate10: string;
        slate11: string;
        slate12: string;
        primaryBrand: string;
        primaryMidnight: string;
        white: string;
        black: string;
    };
    lineHeights: {
        tighter: string;
        tight: string;
        normal: string;
        wide: string;
    };
}, {
    width: string;
    height: string;
    spaceX: string;
    spaceY: string;
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {
    mx: (value: string | number) => {
        marginLeft: string | number;
        marginRight: string | number;
    };
    my: (value: string | number) => {
        marginTop: string | number;
        marginBottom: string | number;
    };
    px: (value: string | number) => {
        paddingLeft: string | number;
        paddingRight: string | number;
    };
    py: (value: string | number) => {
        paddingTop: string | number;
        paddingBottom: string | number;
    };
    size: (value: string | number) => {
        width: string | number;
        height: string | number;
    };
    spaceY: (value: string | number) => {
        "& > :not([hidden]) ~ :not([hidden])": {
            marginTop: string | number;
        };
    };
    spaceX: (value: string | number) => {
        "& > :not([hidden]) ~ :not([hidden])": {
            marginLeft: string | number;
        };
    };
    typeStyle: (styleName: "hero" | "headline" | "title1" | "title2" | "title3" | "heading" | "subhead" | "body" | "footnote" | "caption" | "micro") => {
        fontSize: string;
        fontWeight: string;
        fontFamily: string;
        lineHeight: string;
        letterSpacing: string;
    } | {
        fontSize: string;
        fontFamily: string;
        fontWeight: string;
        letterSpacing: string;
        lineHeight?: undefined;
    } | {
        fontSize: string;
        fontFamily: string;
        letterSpacing: string;
        fontWeight?: undefined;
        lineHeight?: undefined;
    } | {
        fontSize: string;
        fontFamily: string;
        fontWeight?: undefined;
        lineHeight?: undefined;
        letterSpacing?: undefined;
    } | {
        fontSize?: undefined;
        fontWeight?: undefined;
        fontFamily?: undefined;
        lineHeight?: undefined;
        letterSpacing?: undefined;
    };
}>>(...composers: { [K in keyof Composers]: Composers[K] extends string | import("@stitches/react/types/util").Function | import("react").JSXElementConstructor<any> | import("react").ExoticComponent<any> ? Composers[K] : import("@stitches/react/types/stitches").RemoveIndex<CSS_1> & {
    variants?: {
        [x: string]: {
            [x: string]: CSS_1;
            [x: number]: CSS_1;
        };
    } | undefined;
    compoundVariants?: (("variants" extends keyof Composers[K] ? { [Name in keyof Composers[K][keyof Composers[K] & "variants"]]?: import("@stitches/react/types/util").String | import("@stitches/react/types/util").Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name]> | undefined; } : import("@stitches/react/types/util").WideObject) & {
        css: CSS_1;
    })[] | undefined;
    defaultVariants?: ("variants" extends keyof Composers[K] ? { [Name_1 in keyof Composers[K][keyof Composers[K] & "variants"]]?: import("@stitches/react/types/util").String | import("@stitches/react/types/util").Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name_1]> | undefined; } : import("@stitches/react/types/util").WideObject) | undefined;
} & CSS_1 & { [K2 in keyof Composers[K]]: K2 extends "compoundVariants" | "defaultVariants" | "variants" ? unknown : K2 extends keyof CSS_1 ? CSS_1[K2] : unknown; }; }) => import("@stitches/react/types/styled-component").CssComponent<import("@stitches/react/types/styled-component").StyledComponentType<Composers>, import("@stitches/react/types/styled-component").StyledComponentProps<Composers>, {
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xs1: string;
    xs2: string;
    xs3: string;
    sm1: string;
    sm2: string;
    sm3: string;
    md1: string;
    md2: string;
    md3: string;
    lg1: string;
    lg2: string;
    lg3: string;
    xl1: string;
    xl2: string;
    xl3: string;
}, CSS_1>, theme: string & {
    className: string;
    selector: string;
} & {
    fonts: {
        display: import("@stitches/react/types/theme").Token<"display", string, "fonts", "">;
        text: import("@stitches/react/types/theme").Token<"text", string, "fonts", "">;
    };
    fontWeights: {
        standard: import("@stitches/react/types/theme").Token<"standard", string, "fontWeights", "">;
        heavy: import("@stitches/react/types/theme").Token<"heavy", string, "fontWeights", "">;
    };
    letterSpacings: {
        tightest: import("@stitches/react/types/theme").Token<"tightest", string, "letterSpacings", "">;
        tighter: import("@stitches/react/types/theme").Token<"tighter", string, "letterSpacings", "">;
        tight: import("@stitches/react/types/theme").Token<"tight", string, "letterSpacings", "">;
        normal: import("@stitches/react/types/theme").Token<"normal", string, "letterSpacings", "">;
        wide: import("@stitches/react/types/theme").Token<"wide", string, "letterSpacings", "">;
        wider: import("@stitches/react/types/theme").Token<"wider", string, "letterSpacings", "">;
        widest: import("@stitches/react/types/theme").Token<"widest", string, "letterSpacings", "">;
    };
    radii: {
        xs: import("@stitches/react/types/theme").Token<"xs", string, "radii", "">;
        sm: import("@stitches/react/types/theme").Token<"sm", string, "radii", "">;
        md: import("@stitches/react/types/theme").Token<"md", string, "radii", "">;
        lg: import("@stitches/react/types/theme").Token<"lg", string, "radii", "">;
    };
    fontSizes: {
        [-3]: import("@stitches/react/types/theme").Token<"-3", string, "fontSizes", "">;
        [-2]: import("@stitches/react/types/theme").Token<"-2", string, "fontSizes", "">;
        [-1]: import("@stitches/react/types/theme").Token<"-1", string, "fontSizes", "">;
        0: import("@stitches/react/types/theme").Token<"0", string, "fontSizes", "">;
        1: import("@stitches/react/types/theme").Token<"1", string, "fontSizes", "">;
        2: import("@stitches/react/types/theme").Token<"2", string, "fontSizes", "">;
        3: import("@stitches/react/types/theme").Token<"3", string, "fontSizes", "">;
        4: import("@stitches/react/types/theme").Token<"4", string, "fontSizes", "">;
        5: import("@stitches/react/types/theme").Token<"5", string, "fontSizes", "">;
        6: import("@stitches/react/types/theme").Token<"6", string, "fontSizes", "">;
        7: import("@stitches/react/types/theme").Token<"7", string, "fontSizes", "">;
    };
    space: {
        "5xs": import("@stitches/react/types/theme").Token<"5xs", string, "space", "">;
        "4xs": import("@stitches/react/types/theme").Token<"4xs", string, "space", "">;
        "3xs": import("@stitches/react/types/theme").Token<"3xs", string, "space", "">;
        "2xs": import("@stitches/react/types/theme").Token<"2xs", string, "space", "">;
        xs: import("@stitches/react/types/theme").Token<"xs", string, "space", "">;
        s: import("@stitches/react/types/theme").Token<"s", string, "space", "">;
        m: import("@stitches/react/types/theme").Token<"m", string, "space", "">;
        l: import("@stitches/react/types/theme").Token<"l", string, "space", "">;
        xl: import("@stitches/react/types/theme").Token<"xl", string, "space", "">;
        "2xl": import("@stitches/react/types/theme").Token<"2xl", string, "space", "">;
        "3xl": import("@stitches/react/types/theme").Token<"3xl", string, "space", "">;
        "4xl": import("@stitches/react/types/theme").Token<"4xl", string, "space", "">;
        "5xl": import("@stitches/react/types/theme").Token<"5xl", string, "space", "">;
        "6xl": import("@stitches/react/types/theme").Token<"6xl", string, "space", "">;
        "5xs-4xs": import("@stitches/react/types/theme").Token<"5xs-4xs", string, "space", "">;
        "4xs-3xs": import("@stitches/react/types/theme").Token<"4xs-3xs", string, "space", "">;
        "3xs-2xs": import("@stitches/react/types/theme").Token<"3xs-2xs", string, "space", "">;
        "2xs-xs": import("@stitches/react/types/theme").Token<"2xs-xs", string, "space", "">;
        "xs-s": import("@stitches/react/types/theme").Token<"xs-s", string, "space", "">;
        "s-m": import("@stitches/react/types/theme").Token<"s-m", string, "space", "">;
        "m-l": import("@stitches/react/types/theme").Token<"m-l", string, "space", "">;
        "l-xl": import("@stitches/react/types/theme").Token<"l-xl", string, "space", "">;
        "xl-2xl": import("@stitches/react/types/theme").Token<"xl-2xl", string, "space", "">;
        "2xl-3xl": import("@stitches/react/types/theme").Token<"2xl-3xl", string, "space", "">;
        "3xl-4xl": import("@stitches/react/types/theme").Token<"3xl-4xl", string, "space", "">;
        "4xl-5xl": import("@stitches/react/types/theme").Token<"4xl-5xl", string, "space", "">;
        "5xl-6xl": import("@stitches/react/types/theme").Token<"5xl-6xl", string, "space", "">;
        "05": import("@stitches/react/types/theme").Token<"05", string, "space", "">;
        1: import("@stitches/react/types/theme").Token<"1", string, "space", "">;
        2: import("@stitches/react/types/theme").Token<"2", string, "space", "">;
        3: import("@stitches/react/types/theme").Token<"3", string, "space", "">;
        4: import("@stitches/react/types/theme").Token<"4", string, "space", "">;
        5: import("@stitches/react/types/theme").Token<"5", string, "space", "">;
        6: import("@stitches/react/types/theme").Token<"6", string, "space", "">;
        7: import("@stitches/react/types/theme").Token<"7", string, "space", "">;
        8: import("@stitches/react/types/theme").Token<"8", string, "space", "">;
        9: import("@stitches/react/types/theme").Token<"9", string, "space", "">;
        10: import("@stitches/react/types/theme").Token<"10", string, "space", "">;
    };
    sizes: {
        micro: import("@stitches/react/types/theme").Token<"micro", string, "sizes", "">;
        xsmall: import("@stitches/react/types/theme").Token<"xsmall", string, "sizes", "">;
        small: import("@stitches/react/types/theme").Token<"small", string, "sizes", "">;
        medium: import("@stitches/react/types/theme").Token<"medium", string, "sizes", "">;
        large: import("@stitches/react/types/theme").Token<"large", string, "sizes", "">;
        xlarge: import("@stitches/react/types/theme").Token<"xlarge", string, "sizes", "">;
        max: import("@stitches/react/types/theme").Token<"max", string, "sizes", "">;
    };
    shadows: {
        1: import("@stitches/react/types/theme").Token<"1", string, "shadows", "">;
        2: import("@stitches/react/types/theme").Token<"2", string, "shadows", "">;
        3: import("@stitches/react/types/theme").Token<"3", string, "shadows", "">;
        4: import("@stitches/react/types/theme").Token<"4", string, "shadows", "">;
        5: import("@stitches/react/types/theme").Token<"5", string, "shadows", "">;
    };
    colors: {
        neutral100: import("@stitches/react/types/theme").Token<"neutral100", string, "colors", "">;
        neutral200: import("@stitches/react/types/theme").Token<"neutral200", string, "colors", "">;
        neutral300: import("@stitches/react/types/theme").Token<"neutral300", string, "colors", "">;
        neutral400: import("@stitches/react/types/theme").Token<"neutral400", string, "colors", "">;
        neutral500: import("@stitches/react/types/theme").Token<"neutral500", string, "colors", "">;
        neutral600: import("@stitches/react/types/theme").Token<"neutral600", string, "colors", "">;
        neutral700: import("@stitches/react/types/theme").Token<"neutral700", string, "colors", "">;
        neutral800: import("@stitches/react/types/theme").Token<"neutral800", string, "colors", "">;
        neutral900: import("@stitches/react/types/theme").Token<"neutral900", string, "colors", "">;
        midnight100: import("@stitches/react/types/theme").Token<"midnight100", string, "colors", "">;
        midnight300: import("@stitches/react/types/theme").Token<"midnight300", string, "colors", "">;
        midnight500: import("@stitches/react/types/theme").Token<"midnight500", string, "colors", "">;
        midnight700: import("@stitches/react/types/theme").Token<"midnight700", string, "colors", "">;
        midnight900: import("@stitches/react/types/theme").Token<"midnight900", string, "colors", "">;
        accentOrangeDark: import("@stitches/react/types/theme").Token<"accentOrangeDark", string, "colors", "">;
        accentPink: import("@stitches/react/types/theme").Token<"accentPink", string, "colors", "">;
        accentPurple: import("@stitches/react/types/theme").Token<"accentPurple", string, "colors", "">;
        accentNavy: import("@stitches/react/types/theme").Token<"accentNavy", string, "colors", "">;
        accentRoyal: import("@stitches/react/types/theme").Token<"accentRoyal", string, "colors", "">;
        accentCyan: import("@stitches/react/types/theme").Token<"accentCyan", string, "colors", "">;
        accentLime: import("@stitches/react/types/theme").Token<"accentLime", string, "colors", "">;
        orange1: import("@stitches/react/types/theme").Token<"orange1", string, "colors", "">;
        orange2: import("@stitches/react/types/theme").Token<"orange2", string, "colors", "">;
        orange3: import("@stitches/react/types/theme").Token<"orange3", string, "colors", "">;
        orange4: import("@stitches/react/types/theme").Token<"orange4", string, "colors", "">;
        orange5: import("@stitches/react/types/theme").Token<"orange5", string, "colors", "">;
        orange6: import("@stitches/react/types/theme").Token<"orange6", string, "colors", "">;
        orange7: import("@stitches/react/types/theme").Token<"orange7", string, "colors", "">;
        orange8: import("@stitches/react/types/theme").Token<"orange8", string, "colors", "">;
        orange9: import("@stitches/react/types/theme").Token<"orange9", string, "colors", "">;
        orange10: import("@stitches/react/types/theme").Token<"orange10", string, "colors", "">;
        orange11: import("@stitches/react/types/theme").Token<"orange11", string, "colors", "">;
        orange12: import("@stitches/react/types/theme").Token<"orange12", string, "colors", "">;
        green1: import("@stitches/react/types/theme").Token<"green1", string, "colors", "">;
        green2: import("@stitches/react/types/theme").Token<"green2", string, "colors", "">;
        green3: import("@stitches/react/types/theme").Token<"green3", string, "colors", "">;
        green4: import("@stitches/react/types/theme").Token<"green4", string, "colors", "">;
        green5: import("@stitches/react/types/theme").Token<"green5", string, "colors", "">;
        green6: import("@stitches/react/types/theme").Token<"green6", string, "colors", "">;
        green7: import("@stitches/react/types/theme").Token<"green7", string, "colors", "">;
        green8: import("@stitches/react/types/theme").Token<"green8", string, "colors", "">;
        green9: import("@stitches/react/types/theme").Token<"green9", string, "colors", "">;
        green10: import("@stitches/react/types/theme").Token<"green10", string, "colors", "">;
        green11: import("@stitches/react/types/theme").Token<"green11", string, "colors", "">;
        green12: import("@stitches/react/types/theme").Token<"green12", string, "colors", "">;
        teal1: import("@stitches/react/types/theme").Token<"teal1", string, "colors", "">;
        teal2: import("@stitches/react/types/theme").Token<"teal2", string, "colors", "">;
        teal3: import("@stitches/react/types/theme").Token<"teal3", string, "colors", "">;
        teal4: import("@stitches/react/types/theme").Token<"teal4", string, "colors", "">;
        teal5: import("@stitches/react/types/theme").Token<"teal5", string, "colors", "">;
        teal6: import("@stitches/react/types/theme").Token<"teal6", string, "colors", "">;
        teal7: import("@stitches/react/types/theme").Token<"teal7", string, "colors", "">;
        teal8: import("@stitches/react/types/theme").Token<"teal8", string, "colors", "">;
        teal9: import("@stitches/react/types/theme").Token<"teal9", string, "colors", "">;
        teal10: import("@stitches/react/types/theme").Token<"teal10", string, "colors", "">;
        teal11: import("@stitches/react/types/theme").Token<"teal11", string, "colors", "">;
        teal12: import("@stitches/react/types/theme").Token<"teal12", string, "colors", "">;
        sky1: import("@stitches/react/types/theme").Token<"sky1", string, "colors", "">;
        sky2: import("@stitches/react/types/theme").Token<"sky2", string, "colors", "">;
        sky3: import("@stitches/react/types/theme").Token<"sky3", string, "colors", "">;
        sky4: import("@stitches/react/types/theme").Token<"sky4", string, "colors", "">;
        sky5: import("@stitches/react/types/theme").Token<"sky5", string, "colors", "">;
        sky6: import("@stitches/react/types/theme").Token<"sky6", string, "colors", "">;
        sky7: import("@stitches/react/types/theme").Token<"sky7", string, "colors", "">;
        sky8: import("@stitches/react/types/theme").Token<"sky8", string, "colors", "">;
        sky9: import("@stitches/react/types/theme").Token<"sky9", string, "colors", "">;
        sky10: import("@stitches/react/types/theme").Token<"sky10", string, "colors", "">;
        sky11: import("@stitches/react/types/theme").Token<"sky11", string, "colors", "">;
        sky12: import("@stitches/react/types/theme").Token<"sky12", string, "colors", "">;
        blue1: import("@stitches/react/types/theme").Token<"blue1", string, "colors", "">;
        blue2: import("@stitches/react/types/theme").Token<"blue2", string, "colors", "">;
        blue3: import("@stitches/react/types/theme").Token<"blue3", string, "colors", "">;
        blue4: import("@stitches/react/types/theme").Token<"blue4", string, "colors", "">;
        blue5: import("@stitches/react/types/theme").Token<"blue5", string, "colors", "">;
        blue6: import("@stitches/react/types/theme").Token<"blue6", string, "colors", "">;
        blue7: import("@stitches/react/types/theme").Token<"blue7", string, "colors", "">;
        blue8: import("@stitches/react/types/theme").Token<"blue8", string, "colors", "">;
        blue9: import("@stitches/react/types/theme").Token<"blue9", string, "colors", "">;
        blue10: import("@stitches/react/types/theme").Token<"blue10", string, "colors", "">;
        blue11: import("@stitches/react/types/theme").Token<"blue11", string, "colors", "">;
        blue12: import("@stitches/react/types/theme").Token<"blue12", string, "colors", "">;
        indigo1: import("@stitches/react/types/theme").Token<"indigo1", string, "colors", "">;
        indigo2: import("@stitches/react/types/theme").Token<"indigo2", string, "colors", "">;
        indigo3: import("@stitches/react/types/theme").Token<"indigo3", string, "colors", "">;
        indigo4: import("@stitches/react/types/theme").Token<"indigo4", string, "colors", "">;
        indigo5: import("@stitches/react/types/theme").Token<"indigo5", string, "colors", "">;
        indigo6: import("@stitches/react/types/theme").Token<"indigo6", string, "colors", "">;
        indigo7: import("@stitches/react/types/theme").Token<"indigo7", string, "colors", "">;
        indigo8: import("@stitches/react/types/theme").Token<"indigo8", string, "colors", "">;
        indigo9: import("@stitches/react/types/theme").Token<"indigo9", string, "colors", "">;
        indigo10: import("@stitches/react/types/theme").Token<"indigo10", string, "colors", "">;
        indigo11: import("@stitches/react/types/theme").Token<"indigo11", string, "colors", "">;
        indigo12: import("@stitches/react/types/theme").Token<"indigo12", string, "colors", "">;
        plum1: import("@stitches/react/types/theme").Token<"plum1", string, "colors", "">;
        plum2: import("@stitches/react/types/theme").Token<"plum2", string, "colors", "">;
        plum3: import("@stitches/react/types/theme").Token<"plum3", string, "colors", "">;
        plum4: import("@stitches/react/types/theme").Token<"plum4", string, "colors", "">;
        plum5: import("@stitches/react/types/theme").Token<"plum5", string, "colors", "">;
        plum6: import("@stitches/react/types/theme").Token<"plum6", string, "colors", "">;
        plum7: import("@stitches/react/types/theme").Token<"plum7", string, "colors", "">;
        plum8: import("@stitches/react/types/theme").Token<"plum8", string, "colors", "">;
        plum9: import("@stitches/react/types/theme").Token<"plum9", string, "colors", "">;
        plum10: import("@stitches/react/types/theme").Token<"plum10", string, "colors", "">;
        plum11: import("@stitches/react/types/theme").Token<"plum11", string, "colors", "">;
        plum12: import("@stitches/react/types/theme").Token<"plum12", string, "colors", "">;
        red1: import("@stitches/react/types/theme").Token<"red1", string, "colors", "">;
        red2: import("@stitches/react/types/theme").Token<"red2", string, "colors", "">;
        red3: import("@stitches/react/types/theme").Token<"red3", string, "colors", "">;
        red4: import("@stitches/react/types/theme").Token<"red4", string, "colors", "">;
        red5: import("@stitches/react/types/theme").Token<"red5", string, "colors", "">;
        red6: import("@stitches/react/types/theme").Token<"red6", string, "colors", "">;
        red7: import("@stitches/react/types/theme").Token<"red7", string, "colors", "">;
        red8: import("@stitches/react/types/theme").Token<"red8", string, "colors", "">;
        red9: import("@stitches/react/types/theme").Token<"red9", string, "colors", "">;
        red10: import("@stitches/react/types/theme").Token<"red10", string, "colors", "">;
        red11: import("@stitches/react/types/theme").Token<"red11", string, "colors", "">;
        red12: import("@stitches/react/types/theme").Token<"red12", string, "colors", "">;
        amber1: import("@stitches/react/types/theme").Token<"amber1", string, "colors", "">;
        amber2: import("@stitches/react/types/theme").Token<"amber2", string, "colors", "">;
        amber3: import("@stitches/react/types/theme").Token<"amber3", string, "colors", "">;
        amber4: import("@stitches/react/types/theme").Token<"amber4", string, "colors", "">;
        amber5: import("@stitches/react/types/theme").Token<"amber5", string, "colors", "">;
        amber6: import("@stitches/react/types/theme").Token<"amber6", string, "colors", "">;
        amber7: import("@stitches/react/types/theme").Token<"amber7", string, "colors", "">;
        amber8: import("@stitches/react/types/theme").Token<"amber8", string, "colors", "">;
        amber9: import("@stitches/react/types/theme").Token<"amber9", string, "colors", "">;
        amber10: import("@stitches/react/types/theme").Token<"amber10", string, "colors", "">;
        amber11: import("@stitches/react/types/theme").Token<"amber11", string, "colors", "">;
        amber12: import("@stitches/react/types/theme").Token<"amber12", string, "colors", "">;
        accentAmber: import("@stitches/react/types/theme").Token<"accentAmber", string, "colors", "">;
        accentOrange: import("@stitches/react/types/theme").Token<"accentOrange", string, "colors", "">;
        accentRed: import("@stitches/react/types/theme").Token<"accentRed", string, "colors", "">;
        accentPlum: import("@stitches/react/types/theme").Token<"accentPlum", string, "colors", "">;
        accentBlue: import("@stitches/react/types/theme").Token<"accentBlue", string, "colors", "">;
        accentSky: import("@stitches/react/types/theme").Token<"accentSky", string, "colors", "">;
        accentTeal: import("@stitches/react/types/theme").Token<"accentTeal", string, "colors", "">;
        accentGreen: import("@stitches/react/types/theme").Token<"accentGreen", string, "colors", "">;
        slateA1: import("@stitches/react/types/theme").Token<"slateA1", string, "colors", "">;
        slateA2: import("@stitches/react/types/theme").Token<"slateA2", string, "colors", "">;
        slateA3: import("@stitches/react/types/theme").Token<"slateA3", string, "colors", "">;
        slateA4: import("@stitches/react/types/theme").Token<"slateA4", string, "colors", "">;
        slateA5: import("@stitches/react/types/theme").Token<"slateA5", string, "colors", "">;
        slateA6: import("@stitches/react/types/theme").Token<"slateA6", string, "colors", "">;
        slateA7: import("@stitches/react/types/theme").Token<"slateA7", string, "colors", "">;
        slateA8: import("@stitches/react/types/theme").Token<"slateA8", string, "colors", "">;
        slateA9: import("@stitches/react/types/theme").Token<"slateA9", string, "colors", "">;
        slateA10: import("@stitches/react/types/theme").Token<"slateA10", string, "colors", "">;
        slateA11: import("@stitches/react/types/theme").Token<"slateA11", string, "colors", "">;
        slateA12: import("@stitches/react/types/theme").Token<"slateA12", string, "colors", "">;
        slate1: import("@stitches/react/types/theme").Token<"slate1", string, "colors", "">;
        slate2: import("@stitches/react/types/theme").Token<"slate2", string, "colors", "">;
        slate3: import("@stitches/react/types/theme").Token<"slate3", string, "colors", "">;
        slate4: import("@stitches/react/types/theme").Token<"slate4", string, "colors", "">;
        slate5: import("@stitches/react/types/theme").Token<"slate5", string, "colors", "">;
        slate6: import("@stitches/react/types/theme").Token<"slate6", string, "colors", "">;
        slate7: import("@stitches/react/types/theme").Token<"slate7", string, "colors", "">;
        slate8: import("@stitches/react/types/theme").Token<"slate8", string, "colors", "">;
        slate9: import("@stitches/react/types/theme").Token<"slate9", string, "colors", "">;
        slate10: import("@stitches/react/types/theme").Token<"slate10", string, "colors", "">;
        slate11: import("@stitches/react/types/theme").Token<"slate11", string, "colors", "">;
        slate12: import("@stitches/react/types/theme").Token<"slate12", string, "colors", "">;
        primaryBrand: import("@stitches/react/types/theme").Token<"primaryBrand", string, "colors", "">;
        primaryMidnight: import("@stitches/react/types/theme").Token<"primaryMidnight", string, "colors", "">;
        white: import("@stitches/react/types/theme").Token<"white", string, "colors", "">;
        black: import("@stitches/react/types/theme").Token<"black", string, "colors", "">;
    };
    lineHeights: {
        tighter: import("@stitches/react/types/theme").Token<"tighter", string, "lineHeights", "">;
        tight: import("@stitches/react/types/theme").Token<"tight", string, "lineHeights", "">;
        normal: import("@stitches/react/types/theme").Token<"normal", string, "lineHeights", "">;
        wide: import("@stitches/react/types/theme").Token<"wide", string, "lineHeights", "">;
    };
}, globalCss: <Styles extends {
    [K: string]: any;
}>(...styles: ({
    '@import'?: unknown;
    '@font-face'?: unknown;
} & { [K in keyof Styles]: K extends "@import" ? string | string[] : K extends "@font-face" ? import("@stitches/react/types/css").AtRule.FontFace | import("@stitches/react/types/css").AtRule.FontFace[] : K extends `@keyframes ${string}` ? {
    [x: string]: import("@stitches/react/types/css-util").CSS<{
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        xs1: string;
        xs2: string;
        xs3: string;
        sm1: string;
        sm2: string;
        sm3: string;
        md1: string;
        md2: string;
        md3: string;
        lg1: string;
        lg2: string;
        lg3: string;
        xl1: string;
        xl2: string;
        xl3: string;
    }, {
        fonts: {
            display: string;
            text: string;
        };
        fontWeights: {
            standard: number;
            heavy: number;
        };
        letterSpacings: {
            tightest: string;
            tighter: string;
            tight: string;
            normal: number;
            wide: string;
            wider: string;
            widest: string;
        };
        radii: {
            xs: string;
            sm: string;
            md: string;
            lg: string;
        };
        fontSizes: {
            "-3": string;
            "-2": string;
            "-1": string;
            0: string;
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
        };
        space: {
            "5xs": string;
            "4xs": string;
            "3xs": string;
            "2xs": string;
            xs: string;
            s: string;
            m: string;
            l: string;
            xl: string;
            "2xl": string;
            "3xl": string;
            "4xl": string;
            "5xl": string;
            "6xl": string;
            "5xs-4xs": string;
            "4xs-3xs": string;
            "3xs-2xs": string;
            "2xs-xs": string;
            "xs-s": string;
            "s-m": string;
            "m-l": string;
            "l-xl": string;
            "xl-2xl": string;
            "2xl-3xl": string;
            "3xl-4xl": string;
            "4xl-5xl": string;
            "5xl-6xl": string;
            "05": string;
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
        };
        sizes: {
            micro: string;
            xsmall: string;
            small: string;
            medium: string;
            large: string;
            xlarge: string;
            max: string;
        };
        shadows: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
        };
        colors: {
            neutral100: string;
            neutral200: string;
            neutral300: string;
            neutral400: string;
            neutral500: string;
            neutral600: string;
            neutral700: string;
            neutral800: string;
            neutral900: string;
            midnight100: string;
            midnight300: string;
            midnight500: string;
            midnight700: string;
            midnight900: string;
            accentOrangeDark: string;
            accentPink: string;
            accentPurple: string;
            accentNavy: string;
            accentRoyal: string;
            accentCyan: string;
            accentLime: string;
            orange1: string;
            orange2: string;
            orange3: string;
            orange4: string;
            orange5: string;
            orange6: string;
            orange7: string;
            orange8: string;
            orange9: string;
            orange10: string;
            orange11: string;
            orange12: string;
            green1: string;
            green2: string;
            green3: string;
            green4: string;
            green5: string;
            green6: string;
            green7: string;
            green8: string;
            green9: string;
            green10: string;
            green11: string;
            green12: string;
            teal1: string;
            teal2: string;
            teal3: string;
            teal4: string;
            teal5: string;
            teal6: string;
            teal7: string;
            teal8: string;
            teal9: string;
            teal10: string;
            teal11: string;
            teal12: string;
            sky1: string;
            sky2: string;
            sky3: string;
            sky4: string;
            sky5: string;
            sky6: string;
            sky7: string;
            sky8: string;
            sky9: string;
            sky10: string;
            sky11: string;
            sky12: string;
            blue1: string;
            blue2: string;
            blue3: string;
            blue4: string;
            blue5: string;
            blue6: string;
            blue7: string;
            blue8: string;
            blue9: string;
            blue10: string;
            blue11: string;
            blue12: string;
            indigo1: string;
            indigo2: string;
            indigo3: string;
            indigo4: string;
            indigo5: string;
            indigo6: string;
            indigo7: string;
            indigo8: string;
            indigo9: string;
            indigo10: string;
            indigo11: string;
            indigo12: string;
            plum1: string;
            plum2: string;
            plum3: string;
            plum4: string;
            plum5: string;
            plum6: string;
            plum7: string;
            plum8: string;
            plum9: string;
            plum10: string;
            plum11: string;
            plum12: string;
            red1: string;
            red2: string;
            red3: string;
            red4: string;
            red5: string;
            red6: string;
            red7: string;
            red8: string;
            red9: string;
            red10: string;
            red11: string;
            red12: string;
            amber1: string;
            amber2: string;
            amber3: string;
            amber4: string;
            amber5: string;
            amber6: string;
            amber7: string;
            amber8: string;
            amber9: string;
            amber10: string;
            amber11: string;
            amber12: string;
            accentAmber: string;
            accentOrange: string;
            accentRed: string;
            accentPlum: string;
            accentBlue: string;
            accentSky: string;
            accentTeal: string;
            accentGreen: string;
            slateA1: string;
            slateA2: string;
            slateA3: string;
            slateA4: string;
            slateA5: string;
            slateA6: string;
            slateA7: string;
            slateA8: string;
            slateA9: string;
            slateA10: string;
            slateA11: string;
            slateA12: string;
            slate1: string;
            slate2: string;
            slate3: string;
            slate4: string;
            slate5: string;
            slate6: string;
            slate7: string;
            slate8: string;
            slate9: string;
            slate10: string;
            slate11: string;
            slate12: string;
            primaryBrand: string;
            primaryMidnight: string;
            white: string;
            black: string;
        };
        lineHeights: {
            tighter: string;
            tight: string;
            normal: string;
            wide: string;
        };
    }, {
        width: string;
        height: string;
        spaceX: string;
        spaceY: string;
        gap: "space";
        gridGap: "space";
        columnGap: "space";
        gridColumnGap: "space";
        rowGap: "space";
        gridRowGap: "space";
        inset: "space";
        insetBlock: "space";
        insetBlockEnd: "space";
        insetBlockStart: "space";
        insetInline: "space";
        insetInlineEnd: "space";
        insetInlineStart: "space";
        margin: "space";
        marginTop: "space";
        marginRight: "space";
        marginBottom: "space";
        marginLeft: "space";
        marginBlock: "space";
        marginBlockEnd: "space";
        marginBlockStart: "space";
        marginInline: "space";
        marginInlineEnd: "space";
        marginInlineStart: "space";
        padding: "space";
        paddingTop: "space";
        paddingRight: "space";
        paddingBottom: "space";
        paddingLeft: "space";
        paddingBlock: "space";
        paddingBlockEnd: "space";
        paddingBlockStart: "space";
        paddingInline: "space";
        paddingInlineEnd: "space";
        paddingInlineStart: "space";
        scrollMargin: "space";
        scrollMarginTop: "space";
        scrollMarginRight: "space";
        scrollMarginBottom: "space";
        scrollMarginLeft: "space";
        scrollMarginBlock: "space";
        scrollMarginBlockEnd: "space";
        scrollMarginBlockStart: "space";
        scrollMarginInline: "space";
        scrollMarginInlineEnd: "space";
        scrollMarginInlineStart: "space";
        scrollPadding: "space";
        scrollPaddingTop: "space";
        scrollPaddingRight: "space";
        scrollPaddingBottom: "space";
        scrollPaddingLeft: "space";
        scrollPaddingBlock: "space";
        scrollPaddingBlockEnd: "space";
        scrollPaddingBlockStart: "space";
        scrollPaddingInline: "space";
        scrollPaddingInlineEnd: "space";
        scrollPaddingInlineStart: "space";
        top: "space";
        right: "space";
        bottom: "space";
        left: "space";
        fontSize: "fontSizes";
        background: "colors";
        backgroundColor: "colors";
        backgroundImage: "colors";
        borderImage: "colors";
        border: "colors";
        borderBlock: "colors";
        borderBlockEnd: "colors";
        borderBlockStart: "colors";
        borderBottom: "colors";
        borderBottomColor: "colors";
        borderColor: "colors";
        borderInline: "colors";
        borderInlineEnd: "colors";
        borderInlineStart: "colors";
        borderLeft: "colors";
        borderLeftColor: "colors";
        borderRight: "colors";
        borderRightColor: "colors";
        borderTop: "colors";
        borderTopColor: "colors";
        caretColor: "colors";
        color: "colors";
        columnRuleColor: "colors";
        outline: "colors";
        outlineColor: "colors";
        fill: "colors";
        stroke: "colors";
        textDecorationColor: "colors";
        fontFamily: "fonts";
        fontWeight: "fontWeights";
        lineHeight: "lineHeights";
        letterSpacing: "letterSpacings";
        blockSize: "sizes";
        minBlockSize: "sizes";
        maxBlockSize: "sizes";
        inlineSize: "sizes";
        minInlineSize: "sizes";
        maxInlineSize: "sizes";
        minWidth: "sizes";
        maxWidth: "sizes";
        minHeight: "sizes";
        maxHeight: "sizes";
        flexBasis: "sizes";
        gridTemplateColumns: "sizes";
        gridTemplateRows: "sizes";
        borderWidth: "borderWidths";
        borderTopWidth: "borderWidths";
        borderLeftWidth: "borderWidths";
        borderRightWidth: "borderWidths";
        borderBottomWidth: "borderWidths";
        borderStyle: "borderStyles";
        borderTopStyle: "borderStyles";
        borderLeftStyle: "borderStyles";
        borderRightStyle: "borderStyles";
        borderBottomStyle: "borderStyles";
        borderRadius: "radii";
        borderTopLeftRadius: "radii";
        borderTopRightRadius: "radii";
        borderBottomRightRadius: "radii";
        borderBottomLeftRadius: "radii";
        boxShadow: "shadows";
        textShadow: "shadows";
        transition: "transitions";
        zIndex: "zIndices";
    }, {
        mx: (value: string | number) => {
            marginLeft: string | number;
            marginRight: string | number;
        };
        my: (value: string | number) => {
            marginTop: string | number;
            marginBottom: string | number;
        };
        px: (value: string | number) => {
            paddingLeft: string | number;
            paddingRight: string | number;
        };
        py: (value: string | number) => {
            paddingTop: string | number;
            paddingBottom: string | number;
        };
        size: (value: string | number) => {
            width: string | number;
            height: string | number;
        };
        spaceY: (value: string | number) => {
            "& > :not([hidden]) ~ :not([hidden])": {
                marginTop: string | number;
            };
        };
        spaceX: (value: string | number) => {
            "& > :not([hidden]) ~ :not([hidden])": {
                marginLeft: string | number;
            };
        };
        typeStyle: (styleName: "hero" | "headline" | "title1" | "title2" | "title3" | "heading" | "subhead" | "body" | "footnote" | "caption" | "micro") => {
            fontSize: string;
            fontWeight: string;
            fontFamily: string;
            lineHeight: string;
            letterSpacing: string;
        } | {
            fontSize: string;
            fontFamily: string;
            fontWeight: string;
            letterSpacing: string;
            lineHeight?: undefined;
        } | {
            fontSize: string;
            fontFamily: string;
            letterSpacing: string;
            fontWeight?: undefined;
            lineHeight?: undefined;
        } | {
            fontSize: string;
            fontFamily: string;
            fontWeight?: undefined;
            lineHeight?: undefined;
            letterSpacing?: undefined;
        } | {
            fontSize?: undefined;
            fontWeight?: undefined;
            fontFamily?: undefined;
            lineHeight?: undefined;
            letterSpacing?: undefined;
        };
    }>;
} : K extends `@property ${string}` ? import("@stitches/react/types/css").AtRule.Property : import("@stitches/react/types/css-util").CSS<{
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xs1: string;
    xs2: string;
    xs3: string;
    sm1: string;
    sm2: string;
    sm3: string;
    md1: string;
    md2: string;
    md3: string;
    lg1: string;
    lg2: string;
    lg3: string;
    xl1: string;
    xl2: string;
    xl3: string;
}, {
    fonts: {
        display: string;
        text: string;
    };
    fontWeights: {
        standard: number;
        heavy: number;
    };
    letterSpacings: {
        tightest: string;
        tighter: string;
        tight: string;
        normal: number;
        wide: string;
        wider: string;
        widest: string;
    };
    radii: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
    };
    fontSizes: {
        "-3": string;
        "-2": string;
        "-1": string;
        0: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
    };
    space: {
        "5xs": string;
        "4xs": string;
        "3xs": string;
        "2xs": string;
        xs: string;
        s: string;
        m: string;
        l: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
        "5xs-4xs": string;
        "4xs-3xs": string;
        "3xs-2xs": string;
        "2xs-xs": string;
        "xs-s": string;
        "s-m": string;
        "m-l": string;
        "l-xl": string;
        "xl-2xl": string;
        "2xl-3xl": string;
        "3xl-4xl": string;
        "4xl-5xl": string;
        "5xl-6xl": string;
        "05": string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    sizes: {
        micro: string;
        xsmall: string;
        small: string;
        medium: string;
        large: string;
        xlarge: string;
        max: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    colors: {
        neutral100: string;
        neutral200: string;
        neutral300: string;
        neutral400: string;
        neutral500: string;
        neutral600: string;
        neutral700: string;
        neutral800: string;
        neutral900: string;
        midnight100: string;
        midnight300: string;
        midnight500: string;
        midnight700: string;
        midnight900: string;
        accentOrangeDark: string;
        accentPink: string;
        accentPurple: string;
        accentNavy: string;
        accentRoyal: string;
        accentCyan: string;
        accentLime: string;
        orange1: string;
        orange2: string;
        orange3: string;
        orange4: string;
        orange5: string;
        orange6: string;
        orange7: string;
        orange8: string;
        orange9: string;
        orange10: string;
        orange11: string;
        orange12: string;
        green1: string;
        green2: string;
        green3: string;
        green4: string;
        green5: string;
        green6: string;
        green7: string;
        green8: string;
        green9: string;
        green10: string;
        green11: string;
        green12: string;
        teal1: string;
        teal2: string;
        teal3: string;
        teal4: string;
        teal5: string;
        teal6: string;
        teal7: string;
        teal8: string;
        teal9: string;
        teal10: string;
        teal11: string;
        teal12: string;
        sky1: string;
        sky2: string;
        sky3: string;
        sky4: string;
        sky5: string;
        sky6: string;
        sky7: string;
        sky8: string;
        sky9: string;
        sky10: string;
        sky11: string;
        sky12: string;
        blue1: string;
        blue2: string;
        blue3: string;
        blue4: string;
        blue5: string;
        blue6: string;
        blue7: string;
        blue8: string;
        blue9: string;
        blue10: string;
        blue11: string;
        blue12: string;
        indigo1: string;
        indigo2: string;
        indigo3: string;
        indigo4: string;
        indigo5: string;
        indigo6: string;
        indigo7: string;
        indigo8: string;
        indigo9: string;
        indigo10: string;
        indigo11: string;
        indigo12: string;
        plum1: string;
        plum2: string;
        plum3: string;
        plum4: string;
        plum5: string;
        plum6: string;
        plum7: string;
        plum8: string;
        plum9: string;
        plum10: string;
        plum11: string;
        plum12: string;
        red1: string;
        red2: string;
        red3: string;
        red4: string;
        red5: string;
        red6: string;
        red7: string;
        red8: string;
        red9: string;
        red10: string;
        red11: string;
        red12: string;
        amber1: string;
        amber2: string;
        amber3: string;
        amber4: string;
        amber5: string;
        amber6: string;
        amber7: string;
        amber8: string;
        amber9: string;
        amber10: string;
        amber11: string;
        amber12: string;
        accentAmber: string;
        accentOrange: string;
        accentRed: string;
        accentPlum: string;
        accentBlue: string;
        accentSky: string;
        accentTeal: string;
        accentGreen: string;
        slateA1: string;
        slateA2: string;
        slateA3: string;
        slateA4: string;
        slateA5: string;
        slateA6: string;
        slateA7: string;
        slateA8: string;
        slateA9: string;
        slateA10: string;
        slateA11: string;
        slateA12: string;
        slate1: string;
        slate2: string;
        slate3: string;
        slate4: string;
        slate5: string;
        slate6: string;
        slate7: string;
        slate8: string;
        slate9: string;
        slate10: string;
        slate11: string;
        slate12: string;
        primaryBrand: string;
        primaryMidnight: string;
        white: string;
        black: string;
    };
    lineHeights: {
        tighter: string;
        tight: string;
        normal: string;
        wide: string;
    };
}, {
    width: string;
    height: string;
    spaceX: string;
    spaceY: string;
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {
    mx: (value: string | number) => {
        marginLeft: string | number;
        marginRight: string | number;
    };
    my: (value: string | number) => {
        marginTop: string | number;
        marginBottom: string | number;
    };
    px: (value: string | number) => {
        paddingLeft: string | number;
        paddingRight: string | number;
    };
    py: (value: string | number) => {
        paddingTop: string | number;
        paddingBottom: string | number;
    };
    size: (value: string | number) => {
        width: string | number;
        height: string | number;
    };
    spaceY: (value: string | number) => {
        "& > :not([hidden]) ~ :not([hidden])": {
            marginTop: string | number;
        };
    };
    spaceX: (value: string | number) => {
        "& > :not([hidden]) ~ :not([hidden])": {
            marginLeft: string | number;
        };
    };
    typeStyle: (styleName: "hero" | "headline" | "title1" | "title2" | "title3" | "heading" | "subhead" | "body" | "footnote" | "caption" | "micro") => {
        fontSize: string;
        fontWeight: string;
        fontFamily: string;
        lineHeight: string;
        letterSpacing: string;
    } | {
        fontSize: string;
        fontFamily: string;
        fontWeight: string;
        letterSpacing: string;
        lineHeight?: undefined;
    } | {
        fontSize: string;
        fontFamily: string;
        letterSpacing: string;
        fontWeight?: undefined;
        lineHeight?: undefined;
    } | {
        fontSize: string;
        fontFamily: string;
        fontWeight?: undefined;
        lineHeight?: undefined;
        letterSpacing?: undefined;
    } | {
        fontSize?: undefined;
        fontWeight?: undefined;
        fontFamily?: undefined;
        lineHeight?: undefined;
        letterSpacing?: undefined;
    };
}>; })[]) => () => string, config: {
    prefix: "";
    media: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        xs1: string;
        xs2: string;
        xs3: string;
        sm1: string;
        sm2: string;
        sm3: string;
        md1: string;
        md2: string;
        md3: string;
        lg1: string;
        lg2: string;
        lg3: string;
        xl1: string;
        xl2: string;
        xl3: string;
    };
    theme: {
        fonts: {
            display: string;
            text: string;
        };
        fontWeights: {
            standard: number;
            heavy: number;
        };
        letterSpacings: {
            tightest: string;
            tighter: string;
            tight: string;
            normal: number;
            wide: string;
            wider: string;
            widest: string;
        };
        radii: {
            xs: string;
            sm: string;
            md: string;
            lg: string;
        };
        fontSizes: {
            "-3": string;
            "-2": string;
            "-1": string;
            0: string;
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
        };
        space: {
            "5xs": string;
            "4xs": string;
            "3xs": string;
            "2xs": string;
            xs: string;
            s: string;
            m: string;
            l: string;
            xl: string;
            "2xl": string;
            "3xl": string;
            "4xl": string;
            "5xl": string;
            "6xl": string;
            "5xs-4xs": string;
            "4xs-3xs": string;
            "3xs-2xs": string;
            "2xs-xs": string;
            "xs-s": string;
            "s-m": string;
            "m-l": string;
            "l-xl": string;
            "xl-2xl": string;
            "2xl-3xl": string;
            "3xl-4xl": string;
            "4xl-5xl": string;
            "5xl-6xl": string;
            "05": string;
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
        };
        sizes: {
            micro: string;
            xsmall: string;
            small: string;
            medium: string;
            large: string;
            xlarge: string;
            max: string;
        };
        shadows: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
        };
        colors: {
            neutral100: string;
            neutral200: string;
            neutral300: string;
            neutral400: string;
            neutral500: string;
            neutral600: string;
            neutral700: string;
            neutral800: string;
            neutral900: string;
            midnight100: string;
            midnight300: string;
            midnight500: string;
            midnight700: string;
            midnight900: string;
            accentOrangeDark: string;
            accentPink: string;
            accentPurple: string;
            accentNavy: string;
            accentRoyal: string;
            accentCyan: string;
            accentLime: string;
            orange1: string;
            orange2: string;
            orange3: string;
            orange4: string;
            orange5: string;
            orange6: string;
            orange7: string;
            orange8: string;
            orange9: string;
            orange10: string;
            orange11: string;
            orange12: string;
            green1: string;
            green2: string;
            green3: string;
            green4: string;
            green5: string;
            green6: string;
            green7: string;
            green8: string;
            green9: string;
            green10: string;
            green11: string;
            green12: string;
            teal1: string;
            teal2: string;
            teal3: string;
            teal4: string;
            teal5: string;
            teal6: string;
            teal7: string;
            teal8: string;
            teal9: string;
            teal10: string;
            teal11: string;
            teal12: string;
            sky1: string;
            sky2: string;
            sky3: string;
            sky4: string;
            sky5: string;
            sky6: string;
            sky7: string;
            sky8: string;
            sky9: string;
            sky10: string;
            sky11: string;
            sky12: string;
            blue1: string;
            blue2: string;
            blue3: string;
            blue4: string;
            blue5: string;
            blue6: string;
            blue7: string;
            blue8: string;
            blue9: string;
            blue10: string;
            blue11: string;
            blue12: string;
            indigo1: string;
            indigo2: string;
            indigo3: string;
            indigo4: string;
            indigo5: string;
            indigo6: string;
            indigo7: string;
            indigo8: string;
            indigo9: string;
            indigo10: string;
            indigo11: string;
            indigo12: string;
            plum1: string;
            plum2: string;
            plum3: string;
            plum4: string;
            plum5: string;
            plum6: string;
            plum7: string;
            plum8: string;
            plum9: string;
            plum10: string;
            plum11: string;
            plum12: string;
            red1: string;
            red2: string;
            red3: string;
            red4: string;
            red5: string;
            red6: string;
            red7: string;
            red8: string;
            red9: string;
            red10: string;
            red11: string;
            red12: string;
            amber1: string;
            amber2: string;
            amber3: string;
            amber4: string;
            amber5: string;
            amber6: string;
            amber7: string;
            amber8: string;
            amber9: string;
            amber10: string;
            amber11: string;
            amber12: string;
            accentAmber: string;
            accentOrange: string;
            accentRed: string;
            accentPlum: string;
            accentBlue: string;
            accentSky: string;
            accentTeal: string;
            accentGreen: string;
            slateA1: string;
            slateA2: string;
            slateA3: string;
            slateA4: string;
            slateA5: string;
            slateA6: string;
            slateA7: string;
            slateA8: string;
            slateA9: string;
            slateA10: string;
            slateA11: string;
            slateA12: string;
            slate1: string;
            slate2: string;
            slate3: string;
            slate4: string;
            slate5: string;
            slate6: string;
            slate7: string;
            slate8: string;
            slate9: string;
            slate10: string;
            slate11: string;
            slate12: string;
            primaryBrand: string;
            primaryMidnight: string;
            white: string;
            black: string;
        };
        lineHeights: {
            tighter: string;
            tight: string;
            normal: string;
            wide: string;
        };
    };
    themeMap: {
        width: string;
        height: string;
        spaceX: string;
        spaceY: string;
        gap: "space";
        gridGap: "space";
        columnGap: "space";
        gridColumnGap: "space";
        rowGap: "space";
        gridRowGap: "space";
        inset: "space";
        insetBlock: "space";
        insetBlockEnd: "space";
        insetBlockStart: "space";
        insetInline: "space";
        insetInlineEnd: "space";
        insetInlineStart: "space";
        margin: "space";
        marginTop: "space";
        marginRight: "space";
        marginBottom: "space";
        marginLeft: "space";
        marginBlock: "space";
        marginBlockEnd: "space";
        marginBlockStart: "space";
        marginInline: "space";
        marginInlineEnd: "space";
        marginInlineStart: "space";
        padding: "space";
        paddingTop: "space";
        paddingRight: "space";
        paddingBottom: "space";
        paddingLeft: "space";
        paddingBlock: "space";
        paddingBlockEnd: "space";
        paddingBlockStart: "space";
        paddingInline: "space";
        paddingInlineEnd: "space";
        paddingInlineStart: "space";
        scrollMargin: "space";
        scrollMarginTop: "space";
        scrollMarginRight: "space";
        scrollMarginBottom: "space";
        scrollMarginLeft: "space";
        scrollMarginBlock: "space";
        scrollMarginBlockEnd: "space";
        scrollMarginBlockStart: "space";
        scrollMarginInline: "space";
        scrollMarginInlineEnd: "space";
        scrollMarginInlineStart: "space";
        scrollPadding: "space";
        scrollPaddingTop: "space";
        scrollPaddingRight: "space";
        scrollPaddingBottom: "space";
        scrollPaddingLeft: "space";
        scrollPaddingBlock: "space";
        scrollPaddingBlockEnd: "space";
        scrollPaddingBlockStart: "space";
        scrollPaddingInline: "space";
        scrollPaddingInlineEnd: "space";
        scrollPaddingInlineStart: "space";
        top: "space";
        right: "space";
        bottom: "space";
        left: "space";
        fontSize: "fontSizes";
        background: "colors";
        backgroundColor: "colors";
        backgroundImage: "colors";
        borderImage: "colors";
        border: "colors";
        borderBlock: "colors";
        borderBlockEnd: "colors";
        borderBlockStart: "colors";
        borderBottom: "colors";
        borderBottomColor: "colors";
        borderColor: "colors";
        borderInline: "colors";
        borderInlineEnd: "colors";
        borderInlineStart: "colors";
        borderLeft: "colors";
        borderLeftColor: "colors";
        borderRight: "colors";
        borderRightColor: "colors";
        borderTop: "colors";
        borderTopColor: "colors";
        caretColor: "colors";
        color: "colors";
        columnRuleColor: "colors";
        outline: "colors";
        outlineColor: "colors";
        fill: "colors";
        stroke: "colors";
        textDecorationColor: "colors";
        fontFamily: "fonts";
        fontWeight: "fontWeights";
        lineHeight: "lineHeights";
        letterSpacing: "letterSpacings";
        blockSize: "sizes";
        minBlockSize: "sizes";
        maxBlockSize: "sizes";
        inlineSize: "sizes";
        minInlineSize: "sizes";
        maxInlineSize: "sizes";
        minWidth: "sizes";
        maxWidth: "sizes";
        minHeight: "sizes";
        maxHeight: "sizes";
        flexBasis: "sizes";
        gridTemplateColumns: "sizes";
        gridTemplateRows: "sizes";
        borderWidth: "borderWidths";
        borderTopWidth: "borderWidths";
        borderLeftWidth: "borderWidths";
        borderRightWidth: "borderWidths";
        borderBottomWidth: "borderWidths";
        borderStyle: "borderStyles";
        borderTopStyle: "borderStyles";
        borderLeftStyle: "borderStyles";
        borderRightStyle: "borderStyles";
        borderBottomStyle: "borderStyles";
        borderRadius: "radii";
        borderTopLeftRadius: "radii";
        borderTopRightRadius: "radii";
        borderBottomRightRadius: "radii";
        borderBottomLeftRadius: "radii";
        boxShadow: "shadows";
        textShadow: "shadows";
        transition: "transitions";
        zIndex: "zIndices";
    };
    utils: {
        mx: (value: string | number) => {
            marginLeft: string | number;
            marginRight: string | number;
        };
        my: (value: string | number) => {
            marginTop: string | number;
            marginBottom: string | number;
        };
        px: (value: string | number) => {
            paddingLeft: string | number;
            paddingRight: string | number;
        };
        py: (value: string | number) => {
            paddingTop: string | number;
            paddingBottom: string | number;
        };
        size: (value: string | number) => {
            width: string | number;
            height: string | number;
        };
        spaceY: (value: string | number) => {
            "& > :not([hidden]) ~ :not([hidden])": {
                marginTop: string | number;
            };
        };
        spaceX: (value: string | number) => {
            "& > :not([hidden]) ~ :not([hidden])": {
                marginLeft: string | number;
            };
        };
        typeStyle: (styleName: "hero" | "headline" | "title1" | "title2" | "title3" | "heading" | "subhead" | "body" | "footnote" | "caption" | "micro") => {
            fontSize: string;
            fontWeight: string;
            fontFamily: string;
            lineHeight: string;
            letterSpacing: string;
        } | {
            fontSize: string;
            fontFamily: string;
            fontWeight: string;
            letterSpacing: string;
            lineHeight?: undefined;
        } | {
            fontSize: string;
            fontFamily: string;
            letterSpacing: string;
            fontWeight?: undefined;
            lineHeight?: undefined;
        } | {
            fontSize: string;
            fontFamily: string;
            fontWeight?: undefined;
            lineHeight?: undefined;
            letterSpacing?: undefined;
        } | {
            fontSize?: undefined;
            fontWeight?: undefined;
            fontFamily?: undefined;
            lineHeight?: undefined;
            letterSpacing?: undefined;
        };
    };
}, keyframes: (style: {
    [offset: string]: import("@stitches/react/types/css-util").CSS<{
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        xs1: string;
        xs2: string;
        xs3: string;
        sm1: string;
        sm2: string;
        sm3: string;
        md1: string;
        md2: string;
        md3: string;
        lg1: string;
        lg2: string;
        lg3: string;
        xl1: string;
        xl2: string;
        xl3: string;
    }, {
        fonts: {
            display: string;
            text: string;
        };
        fontWeights: {
            standard: number;
            heavy: number;
        };
        letterSpacings: {
            tightest: string;
            tighter: string;
            tight: string;
            normal: number;
            wide: string;
            wider: string;
            widest: string;
        };
        radii: {
            xs: string;
            sm: string;
            md: string;
            lg: string;
        };
        fontSizes: {
            "-3": string;
            "-2": string;
            "-1": string;
            0: string;
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
        };
        space: {
            "5xs": string;
            "4xs": string;
            "3xs": string;
            "2xs": string;
            xs: string;
            s: string;
            m: string;
            l: string;
            xl: string;
            "2xl": string;
            "3xl": string;
            "4xl": string;
            "5xl": string;
            "6xl": string;
            "5xs-4xs": string;
            "4xs-3xs": string;
            "3xs-2xs": string;
            "2xs-xs": string;
            "xs-s": string;
            "s-m": string;
            "m-l": string;
            "l-xl": string;
            "xl-2xl": string;
            "2xl-3xl": string;
            "3xl-4xl": string;
            "4xl-5xl": string;
            "5xl-6xl": string;
            "05": string;
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
        };
        sizes: {
            micro: string;
            xsmall: string;
            small: string;
            medium: string;
            large: string;
            xlarge: string;
            max: string;
        };
        shadows: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
        };
        colors: {
            neutral100: string;
            neutral200: string;
            neutral300: string;
            neutral400: string;
            neutral500: string;
            neutral600: string;
            neutral700: string;
            neutral800: string;
            neutral900: string;
            midnight100: string;
            midnight300: string;
            midnight500: string;
            midnight700: string;
            midnight900: string;
            accentOrangeDark: string;
            accentPink: string;
            accentPurple: string;
            accentNavy: string;
            accentRoyal: string;
            accentCyan: string;
            accentLime: string;
            orange1: string;
            orange2: string;
            orange3: string;
            orange4: string;
            orange5: string;
            orange6: string;
            orange7: string;
            orange8: string;
            orange9: string;
            orange10: string;
            orange11: string;
            orange12: string;
            green1: string;
            green2: string;
            green3: string;
            green4: string;
            green5: string;
            green6: string;
            green7: string;
            green8: string;
            green9: string;
            green10: string;
            green11: string;
            green12: string;
            teal1: string;
            teal2: string;
            teal3: string;
            teal4: string;
            teal5: string;
            teal6: string;
            teal7: string;
            teal8: string;
            teal9: string;
            teal10: string;
            teal11: string;
            teal12: string;
            sky1: string;
            sky2: string;
            sky3: string;
            sky4: string;
            sky5: string;
            sky6: string;
            sky7: string;
            sky8: string;
            sky9: string;
            sky10: string;
            sky11: string;
            sky12: string;
            blue1: string;
            blue2: string;
            blue3: string;
            blue4: string;
            blue5: string;
            blue6: string;
            blue7: string;
            blue8: string;
            blue9: string;
            blue10: string;
            blue11: string;
            blue12: string;
            indigo1: string;
            indigo2: string;
            indigo3: string;
            indigo4: string;
            indigo5: string;
            indigo6: string;
            indigo7: string;
            indigo8: string;
            indigo9: string;
            indigo10: string;
            indigo11: string;
            indigo12: string;
            plum1: string;
            plum2: string;
            plum3: string;
            plum4: string;
            plum5: string;
            plum6: string;
            plum7: string;
            plum8: string;
            plum9: string;
            plum10: string;
            plum11: string;
            plum12: string;
            red1: string;
            red2: string;
            red3: string;
            red4: string;
            red5: string;
            red6: string;
            red7: string;
            red8: string;
            red9: string;
            red10: string;
            red11: string;
            red12: string;
            amber1: string;
            amber2: string;
            amber3: string;
            amber4: string;
            amber5: string;
            amber6: string;
            amber7: string;
            amber8: string;
            amber9: string;
            amber10: string;
            amber11: string;
            amber12: string;
            accentAmber: string;
            accentOrange: string;
            accentRed: string;
            accentPlum: string;
            accentBlue: string;
            accentSky: string;
            accentTeal: string;
            accentGreen: string;
            slateA1: string;
            slateA2: string;
            slateA3: string;
            slateA4: string;
            slateA5: string;
            slateA6: string;
            slateA7: string;
            slateA8: string;
            slateA9: string;
            slateA10: string;
            slateA11: string;
            slateA12: string;
            slate1: string;
            slate2: string;
            slate3: string;
            slate4: string;
            slate5: string;
            slate6: string;
            slate7: string;
            slate8: string;
            slate9: string;
            slate10: string;
            slate11: string;
            slate12: string;
            primaryBrand: string;
            primaryMidnight: string;
            white: string;
            black: string;
        };
        lineHeights: {
            tighter: string;
            tight: string;
            normal: string;
            wide: string;
        };
    }, {
        width: string;
        height: string;
        spaceX: string;
        spaceY: string;
        gap: "space";
        gridGap: "space";
        columnGap: "space";
        gridColumnGap: "space";
        rowGap: "space";
        gridRowGap: "space";
        inset: "space";
        insetBlock: "space";
        insetBlockEnd: "space";
        insetBlockStart: "space";
        insetInline: "space";
        insetInlineEnd: "space";
        insetInlineStart: "space";
        margin: "space";
        marginTop: "space";
        marginRight: "space";
        marginBottom: "space";
        marginLeft: "space";
        marginBlock: "space";
        marginBlockEnd: "space";
        marginBlockStart: "space";
        marginInline: "space";
        marginInlineEnd: "space";
        marginInlineStart: "space";
        padding: "space";
        paddingTop: "space";
        paddingRight: "space";
        paddingBottom: "space";
        paddingLeft: "space";
        paddingBlock: "space";
        paddingBlockEnd: "space";
        paddingBlockStart: "space";
        paddingInline: "space";
        paddingInlineEnd: "space";
        paddingInlineStart: "space";
        scrollMargin: "space";
        scrollMarginTop: "space";
        scrollMarginRight: "space";
        scrollMarginBottom: "space";
        scrollMarginLeft: "space";
        scrollMarginBlock: "space";
        scrollMarginBlockEnd: "space";
        scrollMarginBlockStart: "space";
        scrollMarginInline: "space";
        scrollMarginInlineEnd: "space";
        scrollMarginInlineStart: "space";
        scrollPadding: "space";
        scrollPaddingTop: "space";
        scrollPaddingRight: "space";
        scrollPaddingBottom: "space";
        scrollPaddingLeft: "space";
        scrollPaddingBlock: "space";
        scrollPaddingBlockEnd: "space";
        scrollPaddingBlockStart: "space";
        scrollPaddingInline: "space";
        scrollPaddingInlineEnd: "space";
        scrollPaddingInlineStart: "space";
        top: "space";
        right: "space";
        bottom: "space";
        left: "space";
        fontSize: "fontSizes";
        background: "colors";
        backgroundColor: "colors";
        backgroundImage: "colors";
        borderImage: "colors";
        border: "colors";
        borderBlock: "colors";
        borderBlockEnd: "colors";
        borderBlockStart: "colors";
        borderBottom: "colors";
        borderBottomColor: "colors";
        borderColor: "colors";
        borderInline: "colors";
        borderInlineEnd: "colors";
        borderInlineStart: "colors";
        borderLeft: "colors";
        borderLeftColor: "colors";
        borderRight: "colors";
        borderRightColor: "colors";
        borderTop: "colors";
        borderTopColor: "colors";
        caretColor: "colors";
        color: "colors";
        columnRuleColor: "colors";
        outline: "colors";
        outlineColor: "colors";
        fill: "colors";
        stroke: "colors";
        textDecorationColor: "colors";
        fontFamily: "fonts";
        fontWeight: "fontWeights";
        lineHeight: "lineHeights";
        letterSpacing: "letterSpacings";
        blockSize: "sizes";
        minBlockSize: "sizes";
        maxBlockSize: "sizes";
        inlineSize: "sizes";
        minInlineSize: "sizes";
        maxInlineSize: "sizes";
        minWidth: "sizes";
        maxWidth: "sizes";
        minHeight: "sizes";
        maxHeight: "sizes";
        flexBasis: "sizes";
        gridTemplateColumns: "sizes";
        gridTemplateRows: "sizes";
        borderWidth: "borderWidths";
        borderTopWidth: "borderWidths";
        borderLeftWidth: "borderWidths";
        borderRightWidth: "borderWidths";
        borderBottomWidth: "borderWidths";
        borderStyle: "borderStyles";
        borderTopStyle: "borderStyles";
        borderLeftStyle: "borderStyles";
        borderRightStyle: "borderStyles";
        borderBottomStyle: "borderStyles";
        borderRadius: "radii";
        borderTopLeftRadius: "radii";
        borderTopRightRadius: "radii";
        borderBottomRightRadius: "radii";
        borderBottomLeftRadius: "radii";
        boxShadow: "shadows";
        textShadow: "shadows";
        transition: "transitions";
        zIndex: "zIndices";
    }, {
        mx: (value: string | number) => {
            marginLeft: string | number;
            marginRight: string | number;
        };
        my: (value: string | number) => {
            marginTop: string | number;
            marginBottom: string | number;
        };
        px: (value: string | number) => {
            paddingLeft: string | number;
            paddingRight: string | number;
        };
        py: (value: string | number) => {
            paddingTop: string | number;
            paddingBottom: string | number;
        };
        size: (value: string | number) => {
            width: string | number;
            height: string | number;
        };
        spaceY: (value: string | number) => {
            "& > :not([hidden]) ~ :not([hidden])": {
                marginTop: string | number;
            };
        };
        spaceX: (value: string | number) => {
            "& > :not([hidden]) ~ :not([hidden])": {
                marginLeft: string | number;
            };
        };
        typeStyle: (styleName: "hero" | "headline" | "title1" | "title2" | "title3" | "heading" | "subhead" | "body" | "footnote" | "caption" | "micro") => {
            fontSize: string;
            fontWeight: string;
            fontFamily: string;
            lineHeight: string;
            letterSpacing: string;
        } | {
            fontSize: string;
            fontFamily: string;
            fontWeight: string;
            letterSpacing: string;
            lineHeight?: undefined;
        } | {
            fontSize: string;
            fontFamily: string;
            letterSpacing: string;
            fontWeight?: undefined;
            lineHeight?: undefined;
        } | {
            fontSize: string;
            fontFamily: string;
            fontWeight?: undefined;
            lineHeight?: undefined;
            letterSpacing?: undefined;
        } | {
            fontSize?: undefined;
            fontWeight?: undefined;
            fontFamily?: undefined;
            lineHeight?: undefined;
            letterSpacing?: undefined;
        };
    }>;
}) => {
    (): string;
    name: string;
};
export declare const darkTheme: string & {
    className: string;
    selector: string;
} & import("@stitches/react/types/stitches").ThemeTokens<{
    colors: {
        orange1: string;
        orange2: string;
        orange3: string;
        orange4: string;
        orange5: string;
        orange6: string;
        orange7: string;
        orange8: string;
        orange9: string;
        orange10: string;
        orange11: string;
        orange12: string;
        green1: string;
        green2: string;
        green3: string;
        green4: string;
        green5: string;
        green6: string;
        green7: string;
        green8: string;
        green9: string;
        green10: string;
        green11: string;
        green12: string;
        teal1: string;
        teal2: string;
        teal3: string;
        teal4: string;
        teal5: string;
        teal6: string;
        teal7: string;
        teal8: string;
        teal9: string;
        teal10: string;
        teal11: string;
        teal12: string;
        sky1: string;
        sky2: string;
        sky3: string;
        sky4: string;
        sky5: string;
        sky6: string;
        sky7: string;
        sky8: string;
        sky9: string;
        sky10: string;
        sky11: string;
        sky12: string;
        blue1: string;
        blue2: string;
        blue3: string;
        blue4: string;
        blue5: string;
        blue6: string;
        blue7: string;
        blue8: string;
        blue9: string;
        blue10: string;
        blue11: string;
        blue12: string;
        indigo1: string;
        indigo2: string;
        indigo3: string;
        indigo4: string;
        indigo5: string;
        indigo6: string;
        indigo7: string;
        indigo8: string;
        indigo9: string;
        indigo10: string;
        indigo11: string;
        indigo12: string;
        plum1: string;
        plum2: string;
        plum3: string;
        plum4: string;
        plum5: string;
        plum6: string;
        plum7: string;
        plum8: string;
        plum9: string;
        plum10: string;
        plum11: string;
        plum12: string;
        red1: string;
        red2: string;
        red3: string;
        red4: string;
        red5: string;
        red6: string;
        red7: string;
        red8: string;
        red9: string;
        red10: string;
        red11: string;
        red12: string;
        amber1: string;
        amber2: string;
        amber3: string;
        amber4: string;
        amber5: string;
        amber6: string;
        amber7: string;
        amber8: string;
        amber9: string;
        amber10: string;
        amber11: string;
        amber12: string;
        slateA1: string;
        slateA2: string;
        slateA3: string;
        slateA4: string;
        slateA5: string;
        slateA6: string;
        slateA7: string;
        slateA8: string;
        slateA9: string;
        slateA10: string;
        slateA11: string;
        slateA12: string;
        slate1: string;
        slate2: string;
        slate3: string;
        slate4: string;
        slate5: string;
        slate6: string;
        slate7: string;
        slate8: string;
        slate9: string;
        slate10: string;
        slate11: string;
        slate12: string;
        white: string;
        black: string;
    };
}, "">;
export type { CSS } from "@stitches/react/types/css-util";
